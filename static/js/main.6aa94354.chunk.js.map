{"version":3,"sources":["components/Buscador.js","components/Imagen.js","components/Paginacion.js","components/Resultado.js","App.js","serviceWorker.js","index.js"],"names":["Buscador","busquedaRef","React","createRef","obtenerDatos","e","preventDefault","termino","_this","current","value","props","datosBusquedas","react_default","a","createElement","onSubmit","this","className","ref","type","placeholder","Component","Imagen","_props$imagen","imagen","largeImageURL","likes","previewURL","tags","views","Fragment","src","alt","href","target","Paginacion","onClick","paginaAnterior","paginaSiguiente","Resultado","mostrarImagenes","imagenes","length","map","components_Imagen","key","id","components_Paginacion","App","state","pagina","scroll","document","querySelector","scrollIntoView","setState","consultarApi","url","concat","fetch","then","respuesta","json","resultado","hits","components_Buscador","components_Resultado","Boolean","window","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6aa94354.chunk.js","sourcesContent":["import React,{Component} from 'react';\r\n\r\nclass Buscador extends Component{\r\n\r\n    busquedaRef = React.createRef();\r\n\r\n    obtenerDatos = (e)=>{\r\n        e.preventDefault();\r\n        const termino=this.busquedaRef.current.value;\r\n        //Tomamos el valor del input y lo mandamos al componente padre\r\n        this.props.datosBusquedas(termino);\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <form onSubmit={this.obtenerDatos}>\r\n                <div className=\"row\">\r\n                    <div className=\"form-group col-md-8\">\r\n                        <input ref={this.busquedaRef} type=\"text\" className=\"form-control\r\n                        form-control-lg\" placeholder=\"Ejemplo:Perro\"                  \r\n                        />\r\n                    </div>\r\n                    <div className=\"form-group col-md-4\">\r\n                        <input type=\"submit\" className=\"btn btn-lg btn-danger\r\n                        btn-block\" value=\"Buscar...\"                  \r\n                        />\r\n                    </div>\r\n                </div>\r\n            </form>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Buscador;","import React from 'react';\r\n\r\nconst Imagen = (props)=>{\r\n\r\n    const {largeImageURL,likes,previewURL,tags,views} = props.imagen;\r\n\r\n    return(\r\n        <React.Fragment>\r\n            <div className=\"col-12 col-sm-6 col-md-4 col-lg-3 mb-4 \">\r\n                <div className=\"card\">\r\n                    <img src={previewURL} alt={tags} className=\"card-img-top\" />\r\n                    <div className=\"card-body\">\r\n                        <p className=\"card-text\">{likes} Me gusta</p>\r\n                        <p className=\"card-text\">{views} Visitas</p>\r\n                        <a href={largeImageURL} target=\"_blank\" className=\"btn btn-primary btn-block\">Visitar</a>\r\n                    </div>\r\n                </div>            \r\n            </div>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default Imagen;","import React from 'react';\r\n\r\nconst Paginacion = props =>{\r\n    return (\r\n        <div className=\"py-3\">\r\n            <button onClick={props.paginaAnterior} type=\"button\" className=\"btn btn-info mr-1\">Anterior &larr;</button>\r\n            <button onClick={props.paginaSiguiente} type=\"button\" className=\"btn btn-info\">Siguiente &rarr;</button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Paginacion;","import React,{Component} from 'react';\r\nimport Imagen from './Imagen';\r\nimport Paginacion from './Paginacion';\r\n\r\nclass Resultado extends Component{\r\n\r\n    mostrarImagenes = ()=>{\r\n        const imagenes =this.props.imagenes;\r\n\r\n        if(imagenes.length === 0)return null;\r\n        \r\n       return(\r\n            <React.Fragment>\r\n                <div className=\"col-12 p-5 row\">\r\n                    {imagenes.map(imagen =>(\r\n                        <Imagen \r\n                        key={imagen.id}\r\n                        imagen={imagen}/>\r\n                    ))}\r\n                </div>\r\n                <Paginacion\r\n                    paginaAnterior={this.props.paginaAnterior}\r\n                    paginaSiguiente={this.props.paginaSiguiente}\r\n                />\r\n             </React.Fragment>\r\n       )\r\n        \r\n    }\r\n\r\n    render(){   \r\n        return(\r\n            <React.Fragment>\r\n            {this.mostrarImagenes()}\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Resultado;","import React,{Component} from 'react';\nimport Buscador from './components/Buscador';\nimport Resultado from './components/Resultado';\n\nclass App extends Component {\n\n  state={\n    termino:'',\n    imagenes : [],\n    pagina:''\n  }\n\n  scroll=()=>{\n    const elemento = document.querySelector('.junbotron');\n    elemento.scrollIntoView('smooth','start');\n  }\n\n  paginaAnterior = ()=>{\n    let pagina = this.state.pagina;\n\n    if(pagina===1)return null;\n\n     pagina-=1;\n\n    this.setState({\n      pagina\n    },()=>{\n      this.consultarApi();\n      this.consultarApi();\n    });\n\n\n  }\n\n  paginaSiguiente = ()=>{\n    let pagina = this.state.pagina;\n    pagina +=1;\n\n    this.setState({\n      pagina\n    },()=>{\n      this.consultarApi();\n      this.scroll();\n    });\n\n  }\n\n  consultarApi = ()=>{\n    const pagina = this.state.pagina;\n    const termino = this.state.termino;\n    const url = `https://pixabay.com/api/?key=12823277-ac9dc44c449a1cef2cee8c79b&q=${termino}\n                &per_page=30&page=${pagina}`;\n    \n    fetch(url)\n      .then(respuesta=>respuesta.json())\n      .then(resultado => this.setState({imagenes:resultado.hits}))\n  }\n\n  datosBusquedas = (e)=>{\n    this.setState({\n      termino:e,\n      pagina:1\n    },()=>{\n      this.consultarApi();\n    })\n  }\n  render(){\n  return (\n    <div className=\"app container\">\n      <div className=\"junbotron\">\n        <p className=\"lead text-center\">Buscador de imagenes</p>\n        <Buscador datosBusquedas={this.datosBusquedas}/>\n      </div>\n      <div className=\"row justify-content-center\">\n      <Resultado \n        imagenes={this.state.imagenes}\n        paginaAnterior={this.paginaAnterior}\n        paginaSiguiente={this.paginaSiguiente}\n      />\n      </div>\n\n    </div>\n  );\n}\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}